openapi: 3.0.3
info:
  title: Device geofencing API
  description: API to create, retrieve and delete event subscriptions to realize geofencing for a user device
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/

servers:
  - url: '{apiRoot}/{basePath}'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: geofencing/v0
        description: Base path for the device geofencing API

tags:
  - name: Geofencing subscriptions
    description: Operation to manage event subscription on geofencing events for leaving and entering an area
  - name: Session notifications callback
    description: Operation to manage callbacks based on CloudEvents
paths:
  /subscriptions:
    post:
      tags:
        - Geofencing subscriptions
      summary: 'Create a geofencing subscription for a device'
      operationId: createSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
        required: true
      callbacks:
        event-notifications:
          '{$request.body#/webhook/notificationUrl}':
            post:
              tags:
                - Session notifications callback
              summary: "Subscription notification callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The Device Location server will call this endpoint whenever a device geofencing related event occurs.
              operationId: postNotification
              requestBody:
                required: true
                content:
                  application/cloudevents+json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      CIRCLE_AREA_ENTERED:
                        $ref: "#/components/examples/CIRCLE_AREA_ENTERED"
                      CIRCLE_AREA_LEFT:
                        $ref: "#/components/examples/CIRCLE_AREA_LEFT"
                      SUBSCRIPTION_ENDS:
                        $ref: "#/components/examples/SUBSCRIPTION_ENDS"
              responses:
                '204':
                  description: Successful notification
                '400':
                  $ref: '#/components/responses/Generic400'
                '401':
                  $ref: '#/components/responses/Generic401'
                '403':
                  $ref: '#/components/responses/Generic403'
                '500':
                  $ref: '#/components/responses/Generic500'
                '503':
                  $ref: '#/components/responses/Generic503'
              security:
                - {}
                - notificationsBearerAuth: []
      responses:
        '201':
          description: Created (Successful creation of subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '409':
          $ref: '#/components/responses/Generic409'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
      security:
        - oAuth2AuthorizationCode:
            - "geofencing:subscriptions:write"
    get:
      tags:
        - Geofencing subscription
      summary: 'Operation to retrieve a list of subscriptions - could be an empty list.'
      operationId: getSubscriptionList
      description: Operation to retrieve a list of subscriptions
      responses:
        '200':
          description: The list of subscriptions is retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionInfo'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
      security:
        - oAuth2AuthorizationCode:
            - "geofencing:subscriptions:read"

  /subscriptions/{subscriptionsId}:
    get:
      tags:
        - Geofencing subscription
      summary: 'Operation to retrieve an subscription'
      operationId: getSubscription
      description: Retrieve a given subscription by ID
      parameters:
        - name: subscriptionsId
          in: path
          description: subscription identifier that was obtained from the create event subscription operation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contains information about Subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
      security:
        - oAuth2AuthorizationCode:
            - "geofencing:subscriptions:read"
    delete:
      tags:
        - Geofencing subscriptions
      summary: 'Operation to delete a subscription'
      operationId: deleteSubscription
      description: Delete a given subscription by ID
      parameters:
        - name: subscriptionsId
          in: path
          description: subscription identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Event subscription deleted
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
      security:
        - oAuth2AuthorizationCode:
            - "geofencing:subscriptions:write"

components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: '{tokenUrl}'
          scopes: {}
    notificationsBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "{$request.body#/webhook/notificationAuthToken}"
    oAuth2AuthorizationCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            'geofencing:subscriptions:write': Create or delete subscriptions to geofencing events
            'geofencing:subscriptions:read': Get details of subscriptions to geofencing events

  schemas:
    Area:
      type: object
      properties:
        areaType:
          $ref: '#/components/schemas/AreaType'
      required:
        - areaType
      discriminator:
        propertyName: 'areaType'
        mapping:
          CIRCLE:  "#/components/schemas/Circle"

    AreaType:
      type: string
      description: |
        Type of this area.
        CIRCLE - The area is defined as a circle.
      enum:
        - CIRCLE

    Circle:
      description: Circular area
      allOf:
        - $ref: '#/components/schemas/Area'
        - type: object
          properties:
            center:
              $ref: '#/components/schemas/Point'
            radius:
              type: integer
              description: Expected accuracy for the subscription event of device location in m, from location (radius)
              minimum: 2000
              maximum: 200000
          required:
            - center
            - radius
      example:
        areaType: CIRCLE
        center:
          latitude: 50.735851
          longitude: 7.10066
        radius: 50000

    Point:
      type: object
      description: Coordinates (latitude, longitude) defining a location in a map
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      example:
        latitude: 50.735851
        longitude: 7.10066

    Latitude:
      description: Latitude component of a location
      type: number
      format: double
      minimum: -90
      maximum: 90
      example: 50.735851

    Longitude:
      description: Longitude component of location
      type: number
      format: double
      minimum: -180
      maximum: 180
      example: 7.10066

    Device:
      type: object
      minProperties: 1
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      description: One or more parameters allocated to the device that allow it to be identified

    PhoneNumber:
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"
      description: Subscriber number (MSISDN) in E.164 format, starting with country code and optionally prefixed with '+'.

    NetworkAccessIdentifier:
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        {
          "publicAddress": "84.125.93.10",
          "publicPort" : 59765
        }
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).
        
        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.
        
        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)
        
        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.

    SingleIpv4Addr:
      type: string
      description: A single IPv4 address with no subnet mask
      example: "84.125.93.10"
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'

    Port:
      type: integer
      minimum: 0
      maximum: 65535

    Ipv6Address:
      type: string
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: "2001:db8:85a3:8d3:1319:8a2e:370:7344"
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

    Webhook:
      type: object
      description: Detail for event channel
      properties:
        notificationUrl:
          $ref: '#/components/schemas/NotificationUrl'
        notificationAuthToken:
          $ref: '#/components/schemas/NotificationAuthToken'
      required:
        - notificationUrl

    SubscriptionId:
      type: string
      format: uuid
      description: Identifier of the event subscription - This attribute must not be present in the POST request as it is provided by API server

    SubscriptionDetail:
      type: object
      description: Subscription detail
      properties:
        device:
          $ref: '#/components/schemas/Device'
        area:
          $ref: '#/components/schemas/Area'
        type:
          $ref: "#/components/schemas/Type"
      required:
        - device
        - area
        - type

    Type:
      description: |
        area-entered - Event triggered when the device enters the given area
        area-left - Event triggered when the device leaves the given area
        subscription-ends - Event triggered when the subscription ends
      type: string
      enum:
        - org.camaraproject.geofencing.v0.area-entered
        - org.camaraproject.geofencing.v0.area-left
        - org.camaraproject.geofencing.v0.subscription-ends

    NotificationUrl:
      type: string
      example: "https://application-server.com"
      description: https callback address where the event notification must be POST-ed

    NotificationAuthToken:
      type: string
      example: "c8974e592c2fa383d4a3960714"
      description: "OAuth2 token to be used by the callback API endpoint. It MUST be indicated within HTTP Authorization header e.g. Authorization: Bearer $notificationAuthToken"

    CreateSubscription:
      description: The request for creating a Location Subscription
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook'
        subscriptionDetail:
          $ref: '#/components/schemas/SubscriptionDetail'
        subscriptionExpireTime:
          type: string
          format: date-time
          example: 2023-01-17T13:18:23.682Z
          description: The time when the location-tracking has to be terminated (e.g. in 14 days from now on). Provided in date-time format.
      required:
        - webhook

    SubscriptionInfo:
      description: Represents a area-location event subscription.
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateSubscription'
        - type: object
          properties:
            eventSubscriptionId:
              $ref: '#/components/schemas/SubscriptionId'
            startsAt:
              type: string
              format: date-time
              example: 2023-01-17T13:18:23.682Z
              description: The time when the location-tracking started (e.g. in 7 days from now on). Provided in date-time format.
            expiresAt:
              type: string
              format: date-time
              example: 2023-01-17T13:18:23.682Z
              description: The time when the location-tracking expired (e.g. in 7 days from now on). Provided in date-time format.
          required:
            - eventSubscriptionId
            - webhook

    EventTime:
      format: date-time
      type: string
      description: |
        Timestamp of when the occurrence happened. 
        If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, 
        however all producers for the same source MUST be consistent in this respect. In other words, 
        either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used. 
        (must adhere on CAMARA datetime recommendation based on RFC 3339)

    CloudEvent:
      description: The Cloud-Event used for the callback.
      type: object
      required:
        - id
        - source
        - type
        - specversion
        - time
      properties:
        id:
          description: Identifier of this event, that must be unique in the source context.
          type: string
        source:
          $ref: '#/components/schemas/Source'
        type:
          $ref: '#/components/schemas/Type'
        specversion:
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          type: string
          enum:
            - '1.0'
        datacontenttype:
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          type: string
          enum:
            - application/json
        time:
          $ref: '#/components/schemas/EventTime'
      discriminator:
        propertyName: 'type'
        mapping:
          org.camaraproject.geofencing.v0.area-left: '#/components/schemas/EventAreaLeft'
          org.camaraproject.geofencing.v0.area-entered: '#/components/schemas/EventAreaEntered'
          org.camaraproject.geofencing.v0.subscription-ends: '#/components/schemas/EventSubscriptionEnds'

    EventAreaLeft:
      description:  event structure for event when the device leaves the area
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AreaLeft'

    EventAreaEntered:
      description:  event structure for event when the device enters the area
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AreaEntered'

    EventSubscriptionEnds:
      description:  event structure for event subscription ends
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SubscriptionEnds'

    AreaLeft:
      description: Event detail structure for area-left event
      type: object
      required:
        - device
        - area
      properties:
        device:
          $ref: '#/components/schemas/Device'
        area:
          $ref: '#/components/schemas/Area'

    AreaEntered:
      description: Event detail structure for area-entered event
      type: object
      required:
        - device
        - area
      properties:
        device:
          $ref: '#/components/schemas/Device'
        area:
          $ref: '#/components/schemas/Area'

    SubscriptionEnds:
      description: Event detail structure for SUBSCRIPTION_ENDS event
      type: object
      required:
        - device
        - terminationReason
      properties:
        device:
          $ref: '#/components/schemas/Device'
        terminationReason:
          $ref: '#/components/schemas/TerminationReason'

    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: "Identifies the context in which an event happened in the specific Provider Implementation."
      example:
        - https://github.com/cloudevents
        - mailto:cncf-wg-serverless@lists.cncf.io
        - urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - cloudevents/spec/pull/123
        - /sensors/tn-1234567/alerts
        - 1-555-123-4567

    TerminationReason:
      type: string
      description: |
        NETWORK_TERMINATED - API server stopped sending notification
        SUBSCRIPTION_EXPIRED - Subscription expire time (required by the requester) has been reached
      enum:
        - NETWORK_TERMINATED
        - SUBSCRIPTION_EXPIRED

  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: 'Invalid input'
    
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 401
            code: UNAUTHENTICATED
            message: 'Authorization failed: ...'
    
    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 403
            code: PERMISSION_DENIED
            message: 'Operation not allowed: ...'
    
    Generic404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 404
            code: NOT_FOUND
            message: 'The specified resource is not found'
    
    Generic409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 409
            code: Conflict
            message: 'There is conflict in the request'
    
    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 500
            code: INTERNAL
            message: 'Internal server error'
    
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 503
            code: UNAVAILABLE
            message: 'Service unavailable'
  examples:
    CIRCLE_AREA_ENTERED:
      value:
        id: 123655
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.area-entered
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: 123456789
          area:
            areaType: Circle
            center:
              latitude: 50.735851
              longitude: 7.10066
            radius: 2000
    CIRCLE_AREA_LEFT:
      value:
        id: 123655
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.area-left
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: 123456789
          area:
            areaType: Circle
            center:
              latitude: 50.735851
              longitude: 7.10066
            radius: 2000

    SUBSCRIPTION_ENDS:
      value:
        id: 123655
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.subscription-ends
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: 123456789
          terminationReason: SUBSCRIPTION_EXPIRED
